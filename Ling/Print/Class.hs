{-# LANGUAGE LambdaCase, TypeSynonymInstances, FlexibleInstances #-}
module Ling.Print.Class where

-- Ling.Print is the pretty-printer generated by
-- the BNF converter.
-- Ling.Print.Class contains the class definition and
-- an improved version of `render`.
--
-- After running bnfc you can merge the changes using:
--   git checkout -p Ling/Print.hs
-- You can then select y(es) for the hunks to revert
-- and n(o) for the ones you want to keep.

import           Data.Char
import           Ling.Abs
import           Ling.ErrM
import           Ling.Prelude hiding (q)


-- the top-level printing method
pretty :: Print a => a -> String
pretty = render . prt 0

prettied :: Print a => Getter a String
prettied = to pretty

tracePretty :: Print a => String -> Endom a
tracePretty msg x = trace (msg ++ " " ++ pretty x) x

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (($ "") <$> d []) "" where
  rend i ss = case ss of
    "\n"        :ts -> new i . rend i ts
    "+\n"       :ts -> new (i+1) . rend (i+1) ts
    "-\n"       :ts -> rend (i-1) ts
    [c]         :ts | c `elem` "{[(.?!`" -> showChar c . dropWhile isSpace . rend i ts
    ": "        :ts -> space ":" . rend (i `max` 1) ts
    "=\n"       :ts -> showString "=" . new 1 . rend 1 ts
    [c,'\n']    :ts | c `elem` "{[" -> showChar c . new (i+1) . rend (i+1) ts
    [c,'\n']    :ts | c `elem` "("  -> space [c] . rend (i+1) ts
    ['\n',c]:",":ts | c `elem` "}]" -> new (i-1) . showChar c . new (i-1) . rend (i-1) ts
    ['\n',c]    :ts | c `elem` "}]" -> new (i-1) . space [c] . rend (i-1) ts
    ['\n',c]    :ts | c `elem` ")"  -> {-unlessElem " " (showChar ' ') .-} showChar c . rend (i-1) ts
    ",\n\n"     :ts -> new 0 . new 0 . rend 0 ts
    [c,'\n']    :ts | c `elem` ",.;" -> showChar c . new i . rend i ts
    "in\n"      :ts -> showString "in" . new i . rend i ts
    ['\n',c]    :ts | c `elem` "|X⁇" -> new (i-1) . space [c] . rend i ts
    t:","       :ts -> showString t . space "," . rend i ts
    ","         :ts -> showChar ',' . rend i ts
    t  : [c]    :ts | c `elem` "}])" -> showString t . showChar c . rend i ts
    t           :ts -> space t . rend i ts
    _            -> id
  new    i = showChar '\n' . indent i
  indent i = unlessElem "\n" (replicateS (2*i) (showChar ' '))
  space  t = showString t . unlessElem ".\n" (showChar ' ')
  unlessElem xs f s
    | null s || head s `elem` xs = s
    | otherwise                  = f s

parenth :: Endom Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> Endom ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Endom Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)

txt :: String -> Doc
txt = doc . showString

nl :: Doc
nl = txt "\n"

instance Print a => Print (Maybe a) where
  prt i = \case
    Nothing -> txt "Nothing"
    Just x  -> prPrec i 0 (txt "Just" . prt 0 x)

prtSeq :: Doc -> Doc -> Doc -> Doc -> Doc -> [Doc] -> Doc
prtSeq n p b s e = \case
  []     -> concatD [p, b, e]
  [x]    -> concatD [p, b, x, e]
  (x:xs) -> concatD $ [n, p, b, x]
                   ++ [z | y <- xs, z <- [n, p, s, y]]
                   ++ [n, p, e]

instance (Ord a, Print a) => Print (Set a) where
--prt _i = prtSeq nl id (txt "⦃") (txt ",") (txt "⦄") . map (prt 0) . s2l
  prt _i = prtSeq id id (txt "⦃") (txt ",") (txt "⦄") . map (prt 0) . s2l

instance (Ord k, Print k, Print v) => Print (Map k v) where
--prt _i = prtSeq nl (txt "  ") (txt "⦃") (txt ",") (txt "⦄") . map prettyKV . m2l
  prt _i = prtSeq id id (txt "⦃") (txt ",") (txt "⦄") . map prettyKV . m2l
    where prettyKV (k,v) = prt 0 k . txt " ↦ " . prt 0 v

newtype Lst a = Lst { _unLst :: [a] }

instance Print a => Print (Lst a) where
  prt _i = prtSeq id id (txt "[") (txt ",") (txt "]") . map (prt 0) . _unLst

instance Print a => Print (Prll a) where
  prt _i = prtSeq id id (txt "(") (txt "|") (txt ")") . map (prt 0) . _unPrll

instance Print a => Print (Order a) where
  prt _i = prtSeq id id id (txt ".") id . map (prt 0) . _unOrder

newtype Comma a = Comma { _unComma :: [a] }
  deriving (Eq, Ord, Read, Show)

instance Print a => Print (Comma a) where
  prt _i = prtSeq id id id (txt ",") id . map (prt 0) . _unComma

prettyError :: (a -> [String]) -> Err a -> [String]
prettyError prettyA = \case
  Bad e -> "  Error: " : e ^.. indented 2
  Ok x  -> prettyA x

instance Print a => Print (Err a) where
  prt _ (Bad err) = txt ("Error: " ++ err)
  prt i (Ok  res) = prt i res

instance (Print a, Print b) => Print (Ann a b) where
  prt i (Ann a b) = prPrec i 1 (prt i b . txt ": " . prt i a)

instance Print Name where
  prt _ (Name i) = doc (showString ( i))

instance Print a => Print (Arg a) where
  prt _i (Arg ident x) =
    concatD [ txt "(", prt 0 ident, txt ":", prt 0 x, txt ")" ]

  prtList _ = concatD . map (prt 0)

instance (Print a,Print b) => Print (a,b) where
  prt _i (a,b) =
    concatD [ txt "(" , prt 0 a
            , txt "," , prt 0 b
            , txt ")" ]

instance (Print a,Print b,Print c) => Print (a,b,c) where
  prt _i (a,b,c) =
    concatD [ txt "(" , prt 0 a
            , txt "," , prt 0 b
            , txt "," , prt 0 c
            , txt ")" ]

instance (Print a,Print b,Print c,Print d) => Print (a,b,c,d) where
  prt _i (a,b,c,d) =
    concatD [ txt "(" , prt 0 a
            , txt "," , prt 0 b
            , txt "," , prt 0 c
            , txt "," , prt 0 d
            , txt ")" ]

instance (Print a,Print b,Print c,Print d,Print e) => Print (a,b,c,d,e) where
  prt _i (a,b,c,d,e) =
    concatD [ txt "(" , prt 0 a
            , txt "," , prt 0 b
            , txt "," , prt 0 c
            , txt "," , prt 0 d
            , txt "," , prt 0 e
            , txt ")" ]
