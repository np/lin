-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language MiniC.

module MiniC.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Prg = PPrg [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Dec = Dec QTyp Ident [Arr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = DDef Dec [Dec] [Stm] | DSig Dec [Dec] | DDec Dec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Typ
    = TName TIdent
    | TStr [Fld]
    | TUni [Fld]
    | TEnum [Enm]
    | TVoid
    | TPtr Typ
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Enm = EEnm Ident | ECst Ident Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Fld = FFld Typ Ident [Arr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arr = AArr Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data QTyp = QTyp Qual Typ
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Qual = NoQual | QConst
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SDec Dec Init
    | SPut LVal Exp
    | SFor Stm Exp Stm [Stm]
    | SSwi Exp [Branch]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Branch = Case Exp [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Init = NoInit | SoInit Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Literal
    = LInteger Integer | LDouble Double | LString String | LChar Char
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EVar Ident
    | ELit Literal
    | EParen Exp
    | EArw Exp Ident
    | EFld Exp Ident
    | EArr Exp Exp
    | EApp Exp [Exp]
    | UOp UOp Exp
    | Mul Exp Exp
    | Div Exp Exp
    | Mod Exp Exp
    | Add Exp Exp
    | Sub Exp Exp
    | Lsl Exp Exp
    | Lsr Exp Exp
    | Lt Exp Exp
    | Gt Exp Exp
    | Le Exp Exp
    | Ge Exp Exp
    | Eq Exp Exp
    | NEq Exp Exp
    | And Exp Exp
    | Xor Exp Exp
    | Ior Exp Exp
    | Land Exp Exp
    | Lor Exp Exp
    | Cond Exp Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UOp = UAmp | UPtr | UPlus | UMinus | UTilde | UBang
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LVal
    = LVar Ident
    | LArw LVal Ident
    | LFld LVal Ident
    | LArr LVal Exp
    | LPtr LVal
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TIdent = TIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)
