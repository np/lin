-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for MiniC.

{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-name-shadowing #-}
module MiniC.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified MiniC.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print MiniC.Abs.Ident where
  prt _ (MiniC.Abs.Ident i) = doc $ showString i
instance Print MiniC.Abs.TIdent where
  prt _ (MiniC.Abs.TIdent i) = doc $ showString i
instance Print MiniC.Abs.Prg where
  prt i = \case
    MiniC.Abs.PPrg defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print MiniC.Abs.Dec where
  prt i = \case
    MiniC.Abs.Dec qtyp id_ arrs -> prPrec i 0 (concatD [prt 0 qtyp, prt 0 id_, prt 0 arrs])

instance Print [MiniC.Abs.Dec] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print MiniC.Abs.Def where
  prt i = \case
    MiniC.Abs.DDef dec decs stms -> prPrec i 0 (concatD [prt 0 dec, doc (showString "("), prt 0 decs, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    MiniC.Abs.DSig dec decs -> prPrec i 0 (concatD [prt 0 dec, doc (showString "("), prt 0 decs, doc (showString ")"), doc (showString ";")])
    MiniC.Abs.DDec dec -> prPrec i 0 (concatD [prt 0 dec, doc (showString ";")])

instance Print [MiniC.Abs.Def] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print MiniC.Abs.Typ where
  prt i = \case
    MiniC.Abs.TName tident -> prPrec i 0 (concatD [prt 0 tident])
    MiniC.Abs.TStr flds -> prPrec i 0 (concatD [doc (showString "struct"), doc (showString "{"), prt 0 flds, doc (showString "}")])
    MiniC.Abs.TUni flds -> prPrec i 0 (concatD [doc (showString "union"), doc (showString "{"), prt 0 flds, doc (showString "}")])
    MiniC.Abs.TEnum enms -> prPrec i 0 (concatD [doc (showString "enum"), doc (showString "{"), prt 0 enms, doc (showString "}")])
    MiniC.Abs.TVoid -> prPrec i 0 (concatD [doc (showString "void")])
    MiniC.Abs.TPtr typ -> prPrec i 0 (concatD [prt 0 typ, doc (showString "*")])

instance Print [MiniC.Abs.Typ] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print MiniC.Abs.Enm where
  prt i = \case
    MiniC.Abs.EEnm id_ -> prPrec i 0 (concatD [prt 0 id_])
    MiniC.Abs.ECst id_ exp -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 2 exp])

instance Print [MiniC.Abs.Enm] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print MiniC.Abs.Fld where
  prt i = \case
    MiniC.Abs.FFld typ id_ arrs -> prPrec i 0 (concatD [prt 0 typ, prt 0 id_, prt 0 arrs])

instance Print [MiniC.Abs.Fld] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print MiniC.Abs.Arr where
  prt i = \case
    MiniC.Abs.AArr exp -> prPrec i 0 (concatD [doc (showString "["), prt 0 exp, doc (showString "]")])

instance Print [MiniC.Abs.Arr] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print MiniC.Abs.QTyp where
  prt i = \case
    MiniC.Abs.QTyp qual typ -> prPrec i 0 (concatD [prt 0 qual, prt 0 typ])

instance Print MiniC.Abs.Qual where
  prt i = \case
    MiniC.Abs.NoQual -> prPrec i 0 (concatD [])
    MiniC.Abs.QConst -> prPrec i 0 (concatD [doc (showString "const")])

instance Print MiniC.Abs.Stm where
  prt i = \case
    MiniC.Abs.SDec dec init -> prPrec i 0 (concatD [prt 0 dec, prt 0 init])
    MiniC.Abs.SPut lval exp -> prPrec i 0 (concatD [prt 0 lval, doc (showString "="), prt 0 exp])
    MiniC.Abs.SFor stm1 exp stm2 stms -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 stm1, doc (showString ";"), prt 0 exp, doc (showString ";"), prt 0 stm2, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    MiniC.Abs.SSwi exp branchs -> prPrec i 0 (concatD [doc (showString "switch"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 branchs, doc (showString "}")])

instance Print MiniC.Abs.Branch where
  prt i = \case
    MiniC.Abs.Case exp stms -> prPrec i 0 (concatD [doc (showString "case"), prt 2 exp, doc (showString ":"), prt 0 stms, doc (showString "break"), doc (showString ";")])

instance Print [MiniC.Abs.Branch] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print MiniC.Abs.Init where
  prt i = \case
    MiniC.Abs.NoInit -> prPrec i 0 (concatD [])
    MiniC.Abs.SoInit exp -> prPrec i 0 (concatD [doc (showString "="), prt 0 exp])

instance Print [MiniC.Abs.Stm] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print MiniC.Abs.Literal where
  prt i = \case
    MiniC.Abs.LInteger n -> prPrec i 0 (concatD [prt 0 n])
    MiniC.Abs.LDouble d -> prPrec i 0 (concatD [prt 0 d])
    MiniC.Abs.LString str -> prPrec i 0 (concatD [printString str])
    MiniC.Abs.LChar c -> prPrec i 0 (concatD [prt 0 c])

instance Print MiniC.Abs.Exp where
  prt i = \case
    MiniC.Abs.EVar id_ -> prPrec i 16 (concatD [prt 0 id_])
    MiniC.Abs.ELit literal -> prPrec i 16 (concatD [prt 0 literal])
    MiniC.Abs.EParen exp -> prPrec i 16 (concatD [doc (showString "("), prt 0 exp, doc (showString ")")])
    MiniC.Abs.EArw exp id_ -> prPrec i 15 (concatD [prt 15 exp, doc (showString "->"), prt 0 id_])
    MiniC.Abs.EFld exp id_ -> prPrec i 15 (concatD [prt 15 exp, doc (showString "."), prt 0 id_])
    MiniC.Abs.EArr exp1 exp2 -> prPrec i 15 (concatD [prt 15 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    MiniC.Abs.EApp exp exps -> prPrec i 15 (concatD [prt 15 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    MiniC.Abs.UOp uop exp -> prPrec i 14 (concatD [prt 0 uop, prt 13 exp])
    MiniC.Abs.Mul exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    MiniC.Abs.Div exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    MiniC.Abs.Mod exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "%"), prt 13 exp2])
    MiniC.Abs.Add exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    MiniC.Abs.Sub exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    MiniC.Abs.Lsl exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    MiniC.Abs.Lsr exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    MiniC.Abs.Lt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    MiniC.Abs.Gt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    MiniC.Abs.Le exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    MiniC.Abs.Ge exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    MiniC.Abs.Eq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    MiniC.Abs.NEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    MiniC.Abs.And exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "&"), prt 8 exp2])
    MiniC.Abs.Xor exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "^"), prt 7 exp2])
    MiniC.Abs.Ior exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "|"), prt 6 exp2])
    MiniC.Abs.Land exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    MiniC.Abs.Lor exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    MiniC.Abs.Cond exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "?"), prt 0 exp2, doc (showString ":"), prt 2 exp3])

instance Print MiniC.Abs.UOp where
  prt i = \case
    MiniC.Abs.UAmp -> prPrec i 0 (concatD [doc (showString "&")])
    MiniC.Abs.UPtr -> prPrec i 0 (concatD [doc (showString "*")])
    MiniC.Abs.UPlus -> prPrec i 0 (concatD [doc (showString "+")])
    MiniC.Abs.UMinus -> prPrec i 0 (concatD [doc (showString "-")])
    MiniC.Abs.UTilde -> prPrec i 0 (concatD [doc (showString "~")])
    MiniC.Abs.UBang -> prPrec i 0 (concatD [doc (showString "!")])

instance Print [MiniC.Abs.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print MiniC.Abs.LVal where
  prt i = \case
    MiniC.Abs.LVar id_ -> prPrec i 3 (concatD [prt 0 id_])
    MiniC.Abs.LArw lval id_ -> prPrec i 2 (concatD [prt 2 lval, doc (showString "->"), prt 0 id_])
    MiniC.Abs.LFld lval id_ -> prPrec i 2 (concatD [prt 2 lval, doc (showString "."), prt 0 id_])
    MiniC.Abs.LArr lval exp -> prPrec i 2 (concatD [prt 2 lval, doc (showString "["), prt 0 exp, doc (showString "]")])
    MiniC.Abs.LPtr lval -> prPrec i 0 (concatD [doc (showString "*"), prt 2 lval])
