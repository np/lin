-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module MiniC.Par
  ( happyError
  , myLexer
  , pPrg
  , pDec
  , pListDec
  , pDef
  , pListDef
  , pTyp
  , pListTyp
  , pEnm
  , pListEnm
  , pFld
  , pListFld
  , pArr
  , pListArr
  , pQTyp
  , pQual
  , pStm
  , pBranch
  , pListBranch
  , pInit
  , pListStm
  , pLiteral
  , pExp16
  , pExp15
  , pUOp
  , pExp14
  , pExp13
  , pExp12
  , pExp11
  , pExp10
  , pExp9
  , pExp8
  , pExp7
  , pExp6
  , pExp5
  , pExp4
  , pExp3
  , pExp2
  , pExp1
  , pExp
  , pListExp
  , pLVal3
  , pLVal2
  , pLVal
  ) where

import Prelude

import qualified MiniC.Abs
import MiniC.Lex

}

%name pPrg Prg
%name pDec Dec
%name pListDec ListDec
%name pDef Def
%name pListDef ListDef
%name pTyp Typ
%name pListTyp ListTyp
%name pEnm Enm
%name pListEnm ListEnm
%name pFld Fld
%name pListFld ListFld
%name pArr Arr
%name pListArr ListArr
%name pQTyp QTyp
%name pQual Qual
%name pStm Stm
%name pBranch Branch
%name pListBranch ListBranch
%name pInit Init
%name pListStm ListStm
%name pLiteral Literal
%name pExp16 Exp16
%name pExp15 Exp15
%name pUOp UOp
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp7 Exp7
%name pExp6 Exp6
%name pExp5 Exp5
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pListExp ListExp
%name pLVal3 LVal3
%name pLVal2 LVal2
%name pLVal LVal
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'      { PT _ (TS _ 1)      }
  '!='     { PT _ (TS _ 2)      }
  '%'      { PT _ (TS _ 3)      }
  '&'      { PT _ (TS _ 4)      }
  '&&'     { PT _ (TS _ 5)      }
  '('      { PT _ (TS _ 6)      }
  ')'      { PT _ (TS _ 7)      }
  '*'      { PT _ (TS _ 8)      }
  '+'      { PT _ (TS _ 9)      }
  ','      { PT _ (TS _ 10)     }
  '-'      { PT _ (TS _ 11)     }
  '->'     { PT _ (TS _ 12)     }
  '.'      { PT _ (TS _ 13)     }
  '/'      { PT _ (TS _ 14)     }
  ':'      { PT _ (TS _ 15)     }
  ';'      { PT _ (TS _ 16)     }
  '<'      { PT _ (TS _ 17)     }
  '<<'     { PT _ (TS _ 18)     }
  '<='     { PT _ (TS _ 19)     }
  '='      { PT _ (TS _ 20)     }
  '=='     { PT _ (TS _ 21)     }
  '>'      { PT _ (TS _ 22)     }
  '>='     { PT _ (TS _ 23)     }
  '>>'     { PT _ (TS _ 24)     }
  '?'      { PT _ (TS _ 25)     }
  '['      { PT _ (TS _ 26)     }
  ']'      { PT _ (TS _ 27)     }
  '^'      { PT _ (TS _ 28)     }
  'break'  { PT _ (TS _ 29)     }
  'case'   { PT _ (TS _ 30)     }
  'const'  { PT _ (TS _ 31)     }
  'enum'   { PT _ (TS _ 32)     }
  'for'    { PT _ (TS _ 33)     }
  'struct' { PT _ (TS _ 34)     }
  'switch' { PT _ (TS _ 35)     }
  'union'  { PT _ (TS _ 36)     }
  'void'   { PT _ (TS _ 37)     }
  '{'      { PT _ (TS _ 38)     }
  '|'      { PT _ (TS _ 39)     }
  '||'     { PT _ (TS _ 40)     }
  '}'      { PT _ (TS _ 41)     }
  '~'      { PT _ (TS _ 42)     }
  L_Ident  { PT _ (TV $$)       }
  L_charac { PT _ (TC $$)       }
  L_doubl  { PT _ (TD $$)       }
  L_integ  { PT _ (TI $$)       }
  L_quoted { PT _ (TL $$)       }
  L_TIdent { PT _ (T_TIdent $$) }

%%

Ident :: { MiniC.Abs.Ident }
Ident  : L_Ident { MiniC.Abs.Ident $1 }

Char    :: { Char }
Char     : L_charac { (read $1) :: Char }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

TIdent :: { MiniC.Abs.TIdent }
TIdent  : L_TIdent { MiniC.Abs.TIdent $1 }

Prg :: { MiniC.Abs.Prg }
Prg : ListDef { MiniC.Abs.PPrg $1 }

Dec :: { MiniC.Abs.Dec }
Dec : QTyp Ident ListArr { MiniC.Abs.Dec $1 $2 $3 }

ListDec :: { [MiniC.Abs.Dec] }
ListDec
  : {- empty -} { [] }
  | Dec { (:[]) $1 }
  | Dec ',' ListDec { (:) $1 $3 }

Def :: { MiniC.Abs.Def }
Def
  : Dec '(' ListDec ')' '{' ListStm '}' { MiniC.Abs.DDef $1 $3 $6 }
  | Dec '(' ListDec ')' ';' { MiniC.Abs.DSig $1 $3 }
  | Dec ';' { MiniC.Abs.DDec $1 }

ListDef :: { [MiniC.Abs.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Typ :: { MiniC.Abs.Typ }
Typ
  : TIdent { MiniC.Abs.TName $1 }
  | 'struct' '{' ListFld '}' { MiniC.Abs.TStr $3 }
  | 'union' '{' ListFld '}' { MiniC.Abs.TUni $3 }
  | 'enum' '{' ListEnm '}' { MiniC.Abs.TEnum $3 }
  | 'void' { MiniC.Abs.TVoid }
  | Typ '*' { MiniC.Abs.TPtr $1 }

ListTyp :: { [MiniC.Abs.Typ] }
ListTyp
  : {- empty -} { [] }
  | Typ { (:[]) $1 }
  | Typ ',' ListTyp { (:) $1 $3 }

Enm :: { MiniC.Abs.Enm }
Enm
  : Ident { MiniC.Abs.EEnm $1 }
  | Ident '=' Exp2 { MiniC.Abs.ECst $1 $3 }

ListEnm :: { [MiniC.Abs.Enm] }
ListEnm
  : {- empty -} { [] }
  | Enm { (:[]) $1 }
  | Enm ',' ListEnm { (:) $1 $3 }

Fld :: { MiniC.Abs.Fld }
Fld : Typ Ident ListArr { MiniC.Abs.FFld $1 $2 $3 }

ListFld :: { [MiniC.Abs.Fld] }
ListFld : {- empty -} { [] } | Fld ';' ListFld { (:) $1 $3 }

Arr :: { MiniC.Abs.Arr }
Arr : '[' Exp ']' { MiniC.Abs.AArr $2 }

ListArr :: { [MiniC.Abs.Arr] }
ListArr : {- empty -} { [] } | Arr ListArr { (:) $1 $2 }

QTyp :: { MiniC.Abs.QTyp }
QTyp : Qual Typ { MiniC.Abs.QTyp $1 $2 }

Qual :: { MiniC.Abs.Qual }
Qual
  : {- empty -} { MiniC.Abs.NoQual } | 'const' { MiniC.Abs.QConst }

Stm :: { MiniC.Abs.Stm }
Stm
  : Dec Init { MiniC.Abs.SDec $1 $2 }
  | LVal '=' Exp { MiniC.Abs.SPut $1 $3 }
  | 'for' '(' Stm ';' Exp ';' Stm ')' '{' ListStm '}' { MiniC.Abs.SFor $3 $5 $7 $10 }
  | 'switch' '(' Exp ')' '{' ListBranch '}' { MiniC.Abs.SSwi $3 $6 }

Branch :: { MiniC.Abs.Branch }
Branch
  : 'case' Exp2 ':' ListStm 'break' ';' { MiniC.Abs.Case $2 $4 }

ListBranch :: { [MiniC.Abs.Branch] }
ListBranch : {- empty -} { [] } | Branch ListBranch { (:) $1 $2 }

Init :: { MiniC.Abs.Init }
Init
  : {- empty -} { MiniC.Abs.NoInit }
  | '=' Exp { MiniC.Abs.SoInit $2 }

ListStm :: { [MiniC.Abs.Stm] }
ListStm : {- empty -} { [] } | Stm ';' ListStm { (:) $1 $3 }

Literal :: { MiniC.Abs.Literal }
Literal
  : Integer { MiniC.Abs.LInteger $1 }
  | Double { MiniC.Abs.LDouble $1 }
  | String { MiniC.Abs.LString $1 }
  | Char { MiniC.Abs.LChar $1 }

Exp16 :: { MiniC.Abs.Exp }
Exp16
  : Ident { MiniC.Abs.EVar $1 }
  | Literal { MiniC.Abs.ELit $1 }
  | '(' Exp ')' { MiniC.Abs.EParen $2 }

Exp15 :: { MiniC.Abs.Exp }
Exp15
  : Exp15 '->' Ident { MiniC.Abs.EArw $1 $3 }
  | Exp15 '.' Ident { MiniC.Abs.EFld $1 $3 }
  | Exp15 '[' Exp ']' { MiniC.Abs.EArr $1 $3 }
  | Exp15 '(' ListExp ')' { MiniC.Abs.EApp $1 $3 }
  | Exp16 { $1 }

UOp :: { MiniC.Abs.UOp }
UOp
  : '&' { MiniC.Abs.UAmp }
  | '*' { MiniC.Abs.UPtr }
  | '+' { MiniC.Abs.UPlus }
  | '-' { MiniC.Abs.UMinus }
  | '~' { MiniC.Abs.UTilde }
  | '!' { MiniC.Abs.UBang }

Exp14 :: { MiniC.Abs.Exp }
Exp14 : Exp15 { $1 } | UOp Exp13 { MiniC.Abs.UOp $1 $2 }

Exp13 :: { MiniC.Abs.Exp }
Exp13 : Exp14 { $1 }

Exp12 :: { MiniC.Abs.Exp }
Exp12
  : Exp13 { $1 }
  | Exp12 '*' Exp13 { MiniC.Abs.Mul $1 $3 }
  | Exp12 '/' Exp13 { MiniC.Abs.Div $1 $3 }
  | Exp12 '%' Exp13 { MiniC.Abs.Mod $1 $3 }

Exp11 :: { MiniC.Abs.Exp }
Exp11
  : Exp12 { $1 }
  | Exp11 '+' Exp12 { MiniC.Abs.Add $1 $3 }
  | Exp11 '-' Exp12 { MiniC.Abs.Sub $1 $3 }

Exp10 :: { MiniC.Abs.Exp }
Exp10
  : Exp11 { $1 }
  | Exp10 '<<' Exp11 { MiniC.Abs.Lsl $1 $3 }
  | Exp10 '>>' Exp11 { MiniC.Abs.Lsr $1 $3 }

Exp9 :: { MiniC.Abs.Exp }
Exp9
  : Exp10 { $1 }
  | Exp9 '<' Exp10 { MiniC.Abs.Lt $1 $3 }
  | Exp9 '>' Exp10 { MiniC.Abs.Gt $1 $3 }
  | Exp9 '<=' Exp10 { MiniC.Abs.Le $1 $3 }
  | Exp9 '>=' Exp10 { MiniC.Abs.Ge $1 $3 }

Exp8 :: { MiniC.Abs.Exp }
Exp8
  : Exp9 { $1 }
  | Exp8 '==' Exp9 { MiniC.Abs.Eq $1 $3 }
  | Exp8 '!=' Exp9 { MiniC.Abs.NEq $1 $3 }

Exp7 :: { MiniC.Abs.Exp }
Exp7 : Exp8 { $1 } | Exp7 '&' Exp8 { MiniC.Abs.And $1 $3 }

Exp6 :: { MiniC.Abs.Exp }
Exp6 : Exp7 { $1 } | Exp6 '^' Exp7 { MiniC.Abs.Xor $1 $3 }

Exp5 :: { MiniC.Abs.Exp }
Exp5 : Exp6 { $1 } | Exp5 '|' Exp6 { MiniC.Abs.Ior $1 $3 }

Exp4 :: { MiniC.Abs.Exp }
Exp4 : Exp5 { $1 } | Exp4 '&&' Exp5 { MiniC.Abs.Land $1 $3 }

Exp3 :: { MiniC.Abs.Exp }
Exp3 : Exp4 { $1 } | Exp3 '||' Exp4 { MiniC.Abs.Lor $1 $3 }

Exp2 :: { MiniC.Abs.Exp }
Exp2
  : Exp3 { $1 } | Exp3 '?' Exp ':' Exp2 { MiniC.Abs.Cond $1 $3 $5 }

Exp1 :: { MiniC.Abs.Exp }
Exp1 : Exp2 { $1 }

Exp :: { MiniC.Abs.Exp }
Exp : Exp1 { $1 }

ListExp :: { [MiniC.Abs.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

LVal3 :: { MiniC.Abs.LVal }
LVal3 : Ident { MiniC.Abs.LVar $1 } | '(' LVal ')' { $2 }

LVal2 :: { MiniC.Abs.LVal }
LVal2
  : LVal2 '->' Ident { MiniC.Abs.LArw $1 $3 }
  | LVal2 '.' Ident { MiniC.Abs.LFld $1 $3 }
  | LVal2 '[' Exp ']' { MiniC.Abs.LArr $1 $3 }
  | LVal3 { $1 }

LVal :: { MiniC.Abs.LVal }
LVal : '*' LVal2 { MiniC.Abs.LPtr $2 } | LVal2 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}
